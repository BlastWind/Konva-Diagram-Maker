{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Global_1 = require(\"./Global\");\n\nvar Collection = function () {\n  function Collection() {}\n\n  Collection.toCollection = function (arr) {\n    var collection = new Collection(),\n        len = arr.length,\n        n;\n\n    for (n = 0; n < len; n++) {\n      collection.push(arr[n]);\n    }\n\n    return collection;\n  };\n\n  Collection._mapMethod = function (methodName) {\n    Collection.prototype[methodName] = function () {\n      var len = this.length,\n          i;\n      var args = [].slice.call(arguments);\n\n      for (i = 0; i < len; i++) {\n        this[i][methodName].apply(this[i], args);\n      }\n\n      return this;\n    };\n  };\n\n  Collection.mapMethods = function (constructor) {\n    var prot = constructor.prototype;\n\n    for (var methodName in prot) {\n      Collection._mapMethod(methodName);\n    }\n  };\n\n  return Collection;\n}();\n\nexports.Collection = Collection;\nCollection.prototype = [];\n\nCollection.prototype.each = function (func) {\n  for (var n = 0; n < this.length; n++) {\n    func(this[n], n);\n  }\n};\n\nCollection.prototype.toArray = function () {\n  var arr = [],\n      len = this.length,\n      n;\n\n  for (n = 0; n < len; n++) {\n    arr.push(this[n]);\n  }\n\n  return arr;\n};\n\nvar Transform = function () {\n  function Transform(m) {\n    if (m === void 0) {\n      m = [1, 0, 0, 1, 0, 0];\n    }\n\n    this.m = m && m.slice() || [1, 0, 0, 1, 0, 0];\n  }\n\n  Transform.prototype.copy = function () {\n    return new Transform(this.m);\n  };\n\n  Transform.prototype.point = function (point) {\n    var m = this.m;\n    return {\n      x: m[0] * point.x + m[2] * point.y + m[4],\n      y: m[1] * point.x + m[3] * point.y + m[5]\n    };\n  };\n\n  Transform.prototype.translate = function (x, y) {\n    this.m[4] += this.m[0] * x + this.m[2] * y;\n    this.m[5] += this.m[1] * x + this.m[3] * y;\n    return this;\n  };\n\n  Transform.prototype.scale = function (sx, sy) {\n    this.m[0] *= sx;\n    this.m[1] *= sx;\n    this.m[2] *= sy;\n    this.m[3] *= sy;\n    return this;\n  };\n\n  Transform.prototype.rotate = function (rad) {\n    var c = Math.cos(rad);\n    var s = Math.sin(rad);\n    var m11 = this.m[0] * c + this.m[2] * s;\n    var m12 = this.m[1] * c + this.m[3] * s;\n    var m21 = this.m[0] * -s + this.m[2] * c;\n    var m22 = this.m[1] * -s + this.m[3] * c;\n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n    return this;\n  };\n\n  Transform.prototype.getTranslation = function () {\n    return {\n      x: this.m[4],\n      y: this.m[5]\n    };\n  };\n\n  Transform.prototype.skew = function (sx, sy) {\n    var m11 = this.m[0] + this.m[2] * sy;\n    var m12 = this.m[1] + this.m[3] * sy;\n    var m21 = this.m[2] + this.m[0] * sx;\n    var m22 = this.m[3] + this.m[1] * sx;\n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n    return this;\n  };\n\n  Transform.prototype.multiply = function (matrix) {\n    var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];\n    var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];\n    var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];\n    var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];\n    var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];\n    var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];\n    this.m[0] = m11;\n    this.m[1] = m12;\n    this.m[2] = m21;\n    this.m[3] = m22;\n    this.m[4] = dx;\n    this.m[5] = dy;\n    return this;\n  };\n\n  Transform.prototype.invert = function () {\n    var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);\n    var m0 = this.m[3] * d;\n    var m1 = -this.m[1] * d;\n    var m2 = -this.m[2] * d;\n    var m3 = this.m[0] * d;\n    var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);\n    var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);\n    this.m[0] = m0;\n    this.m[1] = m1;\n    this.m[2] = m2;\n    this.m[3] = m3;\n    this.m[4] = m4;\n    this.m[5] = m5;\n    return this;\n  };\n\n  Transform.prototype.getMatrix = function () {\n    return this.m;\n  };\n\n  Transform.prototype.setAbsolutePosition = function (x, y) {\n    var m0 = this.m[0],\n        m1 = this.m[1],\n        m2 = this.m[2],\n        m3 = this.m[3],\n        m4 = this.m[4],\n        m5 = this.m[5],\n        yt = (m0 * (y - m5) - m1 * (x - m4)) / (m0 * m3 - m1 * m2),\n        xt = (x - m4 - m2 * yt) / m0;\n    return this.translate(xt, yt);\n  };\n\n  return Transform;\n}();\n\nexports.Transform = Transform;\nvar OBJECT_ARRAY = '[object Array]',\n    OBJECT_NUMBER = '[object Number]',\n    OBJECT_STRING = '[object String]',\n    OBJECT_BOOLEAN = '[object Boolean]',\n    PI_OVER_DEG180 = Math.PI / 180,\n    DEG180_OVER_PI = 180 / Math.PI,\n    HASH = '#',\n    EMPTY_STRING = '',\n    ZERO = '0',\n    KONVA_WARNING = 'Konva warning: ',\n    KONVA_ERROR = 'Konva error: ',\n    RGB_PAREN = 'rgb(',\n    COLORS = {\n  aliceblue: [240, 248, 255],\n  antiquewhite: [250, 235, 215],\n  aqua: [0, 255, 255],\n  aquamarine: [127, 255, 212],\n  azure: [240, 255, 255],\n  beige: [245, 245, 220],\n  bisque: [255, 228, 196],\n  black: [0, 0, 0],\n  blanchedalmond: [255, 235, 205],\n  blue: [0, 0, 255],\n  blueviolet: [138, 43, 226],\n  brown: [165, 42, 42],\n  burlywood: [222, 184, 135],\n  cadetblue: [95, 158, 160],\n  chartreuse: [127, 255, 0],\n  chocolate: [210, 105, 30],\n  coral: [255, 127, 80],\n  cornflowerblue: [100, 149, 237],\n  cornsilk: [255, 248, 220],\n  crimson: [220, 20, 60],\n  cyan: [0, 255, 255],\n  darkblue: [0, 0, 139],\n  darkcyan: [0, 139, 139],\n  darkgoldenrod: [184, 132, 11],\n  darkgray: [169, 169, 169],\n  darkgreen: [0, 100, 0],\n  darkgrey: [169, 169, 169],\n  darkkhaki: [189, 183, 107],\n  darkmagenta: [139, 0, 139],\n  darkolivegreen: [85, 107, 47],\n  darkorange: [255, 140, 0],\n  darkorchid: [153, 50, 204],\n  darkred: [139, 0, 0],\n  darksalmon: [233, 150, 122],\n  darkseagreen: [143, 188, 143],\n  darkslateblue: [72, 61, 139],\n  darkslategray: [47, 79, 79],\n  darkslategrey: [47, 79, 79],\n  darkturquoise: [0, 206, 209],\n  darkviolet: [148, 0, 211],\n  deeppink: [255, 20, 147],\n  deepskyblue: [0, 191, 255],\n  dimgray: [105, 105, 105],\n  dimgrey: [105, 105, 105],\n  dodgerblue: [30, 144, 255],\n  firebrick: [178, 34, 34],\n  floralwhite: [255, 255, 240],\n  forestgreen: [34, 139, 34],\n  fuchsia: [255, 0, 255],\n  gainsboro: [220, 220, 220],\n  ghostwhite: [248, 248, 255],\n  gold: [255, 215, 0],\n  goldenrod: [218, 165, 32],\n  gray: [128, 128, 128],\n  green: [0, 128, 0],\n  greenyellow: [173, 255, 47],\n  grey: [128, 128, 128],\n  honeydew: [240, 255, 240],\n  hotpink: [255, 105, 180],\n  indianred: [205, 92, 92],\n  indigo: [75, 0, 130],\n  ivory: [255, 255, 240],\n  khaki: [240, 230, 140],\n  lavender: [230, 230, 250],\n  lavenderblush: [255, 240, 245],\n  lawngreen: [124, 252, 0],\n  lemonchiffon: [255, 250, 205],\n  lightblue: [173, 216, 230],\n  lightcoral: [240, 128, 128],\n  lightcyan: [224, 255, 255],\n  lightgoldenrodyellow: [250, 250, 210],\n  lightgray: [211, 211, 211],\n  lightgreen: [144, 238, 144],\n  lightgrey: [211, 211, 211],\n  lightpink: [255, 182, 193],\n  lightsalmon: [255, 160, 122],\n  lightseagreen: [32, 178, 170],\n  lightskyblue: [135, 206, 250],\n  lightslategray: [119, 136, 153],\n  lightslategrey: [119, 136, 153],\n  lightsteelblue: [176, 196, 222],\n  lightyellow: [255, 255, 224],\n  lime: [0, 255, 0],\n  limegreen: [50, 205, 50],\n  linen: [250, 240, 230],\n  magenta: [255, 0, 255],\n  maroon: [128, 0, 0],\n  mediumaquamarine: [102, 205, 170],\n  mediumblue: [0, 0, 205],\n  mediumorchid: [186, 85, 211],\n  mediumpurple: [147, 112, 219],\n  mediumseagreen: [60, 179, 113],\n  mediumslateblue: [123, 104, 238],\n  mediumspringgreen: [0, 250, 154],\n  mediumturquoise: [72, 209, 204],\n  mediumvioletred: [199, 21, 133],\n  midnightblue: [25, 25, 112],\n  mintcream: [245, 255, 250],\n  mistyrose: [255, 228, 225],\n  moccasin: [255, 228, 181],\n  navajowhite: [255, 222, 173],\n  navy: [0, 0, 128],\n  oldlace: [253, 245, 230],\n  olive: [128, 128, 0],\n  olivedrab: [107, 142, 35],\n  orange: [255, 165, 0],\n  orangered: [255, 69, 0],\n  orchid: [218, 112, 214],\n  palegoldenrod: [238, 232, 170],\n  palegreen: [152, 251, 152],\n  paleturquoise: [175, 238, 238],\n  palevioletred: [219, 112, 147],\n  papayawhip: [255, 239, 213],\n  peachpuff: [255, 218, 185],\n  peru: [205, 133, 63],\n  pink: [255, 192, 203],\n  plum: [221, 160, 203],\n  powderblue: [176, 224, 230],\n  purple: [128, 0, 128],\n  rebeccapurple: [102, 51, 153],\n  red: [255, 0, 0],\n  rosybrown: [188, 143, 143],\n  royalblue: [65, 105, 225],\n  saddlebrown: [139, 69, 19],\n  salmon: [250, 128, 114],\n  sandybrown: [244, 164, 96],\n  seagreen: [46, 139, 87],\n  seashell: [255, 245, 238],\n  sienna: [160, 82, 45],\n  silver: [192, 192, 192],\n  skyblue: [135, 206, 235],\n  slateblue: [106, 90, 205],\n  slategray: [119, 128, 144],\n  slategrey: [119, 128, 144],\n  snow: [255, 255, 250],\n  springgreen: [0, 255, 127],\n  steelblue: [70, 130, 180],\n  tan: [210, 180, 140],\n  teal: [0, 128, 128],\n  thistle: [216, 191, 216],\n  transparent: [255, 255, 255, 0],\n  tomato: [255, 99, 71],\n  turquoise: [64, 224, 208],\n  violet: [238, 130, 238],\n  wheat: [245, 222, 179],\n  white: [255, 255, 255],\n  whitesmoke: [245, 245, 245],\n  yellow: [255, 255, 0],\n  yellowgreen: [154, 205, 5]\n},\n    RGB_REGEX = /rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)/,\n    animQueue = [];\nexports.Util = {\n  _isElement: function _isElement(obj) {\n    return !!(obj && obj.nodeType == 1);\n  },\n  _isFunction: function _isFunction(obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n  },\n  _isPlainObject: function _isPlainObject(obj) {\n    return !!obj && obj.constructor === Object;\n  },\n  _isArray: function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT_ARRAY;\n  },\n  _isNumber: function _isNumber(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT_NUMBER && !isNaN(obj) && isFinite(obj);\n  },\n  _isString: function _isString(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT_STRING;\n  },\n  _isBoolean: function _isBoolean(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT_BOOLEAN;\n  },\n  isObject: function isObject(val) {\n    return val instanceof Object;\n  },\n  isValidSelector: function isValidSelector(selector) {\n    if (typeof selector !== 'string') {\n      return false;\n    }\n\n    var firstChar = selector[0];\n    return firstChar === '#' || firstChar === '.' || firstChar === firstChar.toUpperCase();\n  },\n  _sign: function _sign(number) {\n    if (number === 0) {\n      return 0;\n    }\n\n    if (number > 0) {\n      return 1;\n    } else {\n      return -1;\n    }\n  },\n  requestAnimFrame: function requestAnimFrame(callback) {\n    animQueue.push(callback);\n\n    if (animQueue.length === 1) {\n      requestAnimationFrame(function () {\n        var queue = animQueue;\n        animQueue = [];\n        queue.forEach(function (cb) {\n          cb();\n        });\n      });\n    }\n  },\n  createCanvasElement: function createCanvasElement() {\n    var canvas = document.createElement('canvas');\n\n    try {\n      canvas.style = canvas.style || {};\n    } catch (e) {}\n\n    return canvas;\n  },\n  createImageElement: function createImageElement() {\n    return document.createElement('img');\n  },\n  _isInDocument: function _isInDocument(el) {\n    while (el = el.parentNode) {\n      if (el == document) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  _simplifyArray: function _simplifyArray(arr) {\n    var retArr = [],\n        len = arr.length,\n        util = exports.Util,\n        n,\n        val;\n\n    for (n = 0; n < len; n++) {\n      val = arr[n];\n\n      if (util._isNumber(val)) {\n        val = Math.round(val * 1000) / 1000;\n      } else if (!util._isString(val)) {\n        val = val.toString();\n      }\n\n      retArr.push(val);\n    }\n\n    return retArr;\n  },\n  _urlToImage: function _urlToImage(url, callback) {\n    var imageObj = new Global_1.glob.Image();\n\n    imageObj.onload = function () {\n      callback(imageObj);\n    };\n\n    imageObj.src = url;\n  },\n  _rgbToHex: function _rgbToHex(r, g, b) {\n    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  },\n  _hexToRgb: function _hexToRgb(hex) {\n    hex = hex.replace(HASH, EMPTY_STRING);\n    var bigint = parseInt(hex, 16);\n    return {\n      r: bigint >> 16 & 255,\n      g: bigint >> 8 & 255,\n      b: bigint & 255\n    };\n  },\n  getRandomColor: function getRandomColor() {\n    var randColor = (Math.random() * 0xffffff << 0).toString(16);\n\n    while (randColor.length < 6) {\n      randColor = ZERO + randColor;\n    }\n\n    return HASH + randColor;\n  },\n  get: function get(val, def) {\n    if (val === undefined) {\n      return def;\n    } else {\n      return val;\n    }\n  },\n  getRGB: function getRGB(color) {\n    var rgb;\n\n    if (color in COLORS) {\n      rgb = COLORS[color];\n      return {\n        r: rgb[0],\n        g: rgb[1],\n        b: rgb[2]\n      };\n    } else if (color[0] === HASH) {\n      return this._hexToRgb(color.substring(1));\n    } else if (color.substr(0, 4) === RGB_PAREN) {\n      rgb = RGB_REGEX.exec(color.replace(/ /g, ''));\n      return {\n        r: parseInt(rgb[1], 10),\n        g: parseInt(rgb[2], 10),\n        b: parseInt(rgb[3], 10)\n      };\n    } else {\n      return {\n        r: 0,\n        g: 0,\n        b: 0\n      };\n    }\n  },\n  colorToRGBA: function colorToRGBA(str) {\n    str = str || 'black';\n    return exports.Util._namedColorToRBA(str) || exports.Util._hex3ColorToRGBA(str) || exports.Util._hex6ColorToRGBA(str) || exports.Util._rgbColorToRGBA(str) || exports.Util._rgbaColorToRGBA(str);\n  },\n  _namedColorToRBA: function _namedColorToRBA(str) {\n    var c = COLORS[str.toLowerCase()];\n\n    if (!c) {\n      return null;\n    }\n\n    return {\n      r: c[0],\n      g: c[1],\n      b: c[2],\n      a: 1\n    };\n  },\n  _rgbColorToRGBA: function _rgbColorToRGBA(str) {\n    if (str.indexOf('rgb(') === 0) {\n      str = str.match(/rgb\\(([^)]+)\\)/)[1];\n      var parts = str.split(/ *, */).map(Number);\n      return {\n        r: parts[0],\n        g: parts[1],\n        b: parts[2],\n        a: 1\n      };\n    }\n  },\n  _rgbaColorToRGBA: function _rgbaColorToRGBA(str) {\n    if (str.indexOf('rgba(') === 0) {\n      str = str.match(/rgba\\(([^)]+)\\)/)[1];\n      var parts = str.split(/ *, */).map(Number);\n      return {\n        r: parts[0],\n        g: parts[1],\n        b: parts[2],\n        a: parts[3]\n      };\n    }\n  },\n  _hex6ColorToRGBA: function _hex6ColorToRGBA(str) {\n    if (str[0] === '#' && str.length === 7) {\n      return {\n        r: parseInt(str.slice(1, 3), 16),\n        g: parseInt(str.slice(3, 5), 16),\n        b: parseInt(str.slice(5, 7), 16),\n        a: 1\n      };\n    }\n  },\n  _hex3ColorToRGBA: function _hex3ColorToRGBA(str) {\n    if (str[0] === '#' && str.length === 4) {\n      return {\n        r: parseInt(str[1] + str[1], 16),\n        g: parseInt(str[2] + str[2], 16),\n        b: parseInt(str[3] + str[3], 16),\n        a: 1\n      };\n    }\n  },\n  haveIntersection: function haveIntersection(r1, r2) {\n    return !(r2.x > r1.x + r1.width || r2.x + r2.width < r1.x || r2.y > r1.y + r1.height || r2.y + r2.height < r1.y);\n  },\n  cloneObject: function cloneObject(obj) {\n    var retObj = {};\n\n    for (var key in obj) {\n      if (this._isPlainObject(obj[key])) {\n        retObj[key] = this.cloneObject(obj[key]);\n      } else if (this._isArray(obj[key])) {\n        retObj[key] = this.cloneArray(obj[key]);\n      } else {\n        retObj[key] = obj[key];\n      }\n    }\n\n    return retObj;\n  },\n  cloneArray: function cloneArray(arr) {\n    return arr.slice(0);\n  },\n  _degToRad: function _degToRad(deg) {\n    return deg * PI_OVER_DEG180;\n  },\n  _radToDeg: function _radToDeg(rad) {\n    return rad * DEG180_OVER_PI;\n  },\n  _capitalize: function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  },\n  throw: function _throw(str) {\n    throw new Error(KONVA_ERROR + str);\n  },\n  error: function error(str) {\n    console.error(KONVA_ERROR + str);\n  },\n  warn: function warn(str) {\n    if (!Global_1.Konva.showWarnings) {\n      return;\n    }\n\n    console.warn(KONVA_WARNING + str);\n  },\n  extend: function extend(child, parent) {\n    function Ctor() {\n      this.constructor = child;\n    }\n\n    Ctor.prototype = parent.prototype;\n    var oldProto = child.prototype;\n    child.prototype = new Ctor();\n\n    for (var key in oldProto) {\n      if (oldProto.hasOwnProperty(key)) {\n        child.prototype[key] = oldProto[key];\n      }\n    }\n\n    child.__super__ = parent.prototype;\n    child.super = parent;\n  },\n  _getControlPoints: function _getControlPoints(x0, y0, x1, y1, x2, y2, t) {\n    var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)),\n        d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)),\n        fa = t * d01 / (d01 + d12),\n        fb = t * d12 / (d01 + d12),\n        p1x = x1 - fa * (x2 - x0),\n        p1y = y1 - fa * (y2 - y0),\n        p2x = x1 + fb * (x2 - x0),\n        p2y = y1 + fb * (y2 - y0);\n    return [p1x, p1y, p2x, p2y];\n  },\n  _expandPoints: function _expandPoints(p, tension) {\n    var len = p.length,\n        allPoints = [],\n        n,\n        cp;\n\n    for (n = 2; n < len - 2; n += 2) {\n      cp = exports.Util._getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);\n      allPoints.push(cp[0]);\n      allPoints.push(cp[1]);\n      allPoints.push(p[n]);\n      allPoints.push(p[n + 1]);\n      allPoints.push(cp[2]);\n      allPoints.push(cp[3]);\n    }\n\n    return allPoints;\n  },\n  each: function each(obj, func) {\n    for (var key in obj) {\n      func(key, obj[key]);\n    }\n  },\n  _inRange: function _inRange(val, left, right) {\n    return left <= val && val < right;\n  },\n  _getProjectionToSegment: function _getProjectionToSegment(x1, y1, x2, y2, x3, y3) {\n    var x, y, dist;\n    var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\n    if (pd2 == 0) {\n      x = x1;\n      y = y1;\n      dist = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);\n    } else {\n      var u = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;\n\n      if (u < 0) {\n        x = x1;\n        y = y1;\n        dist = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);\n      } else if (u > 1.0) {\n        x = x2;\n        y = y2;\n        dist = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);\n      } else {\n        x = x1 + u * (x2 - x1);\n        y = y1 + u * (y2 - y1);\n        dist = (x - x3) * (x - x3) + (y - y3) * (y - y3);\n      }\n    }\n\n    return [x, y, dist];\n  },\n  _getProjectionToLine: function _getProjectionToLine(pt, line, isClosed) {\n    var pc = exports.Util.cloneObject(pt);\n    var dist = Number.MAX_VALUE;\n    line.forEach(function (p1, i) {\n      if (!isClosed && i === line.length - 1) {\n        return;\n      }\n\n      var p2 = line[(i + 1) % line.length];\n\n      var proj = exports.Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt.x, pt.y);\n\n      var px = proj[0],\n          py = proj[1],\n          pdist = proj[2];\n\n      if (pdist < dist) {\n        pc.x = px;\n        pc.y = py;\n        dist = pdist;\n      }\n    });\n    return pc;\n  },\n  _prepareArrayForTween: function _prepareArrayForTween(startArray, endArray, isClosed) {\n    var n,\n        start = [],\n        end = [];\n\n    if (startArray.length > endArray.length) {\n      var temp = endArray;\n      endArray = startArray;\n      startArray = temp;\n    }\n\n    for (n = 0; n < startArray.length; n += 2) {\n      start.push({\n        x: startArray[n],\n        y: startArray[n + 1]\n      });\n    }\n\n    for (n = 0; n < endArray.length; n += 2) {\n      end.push({\n        x: endArray[n],\n        y: endArray[n + 1]\n      });\n    }\n\n    var newStart = [];\n    end.forEach(function (point) {\n      var pr = exports.Util._getProjectionToLine(point, start, isClosed);\n\n      newStart.push(pr.x);\n      newStart.push(pr.y);\n    });\n    return newStart;\n  },\n  _prepareToStringify: function _prepareToStringify(obj) {\n    var desc;\n    obj.visitedByCircularReferenceRemoval = true;\n\n    for (var key in obj) {\n      if (!(obj.hasOwnProperty(key) && obj[key] && typeof obj[key] == 'object')) {\n        continue;\n      }\n\n      desc = Object.getOwnPropertyDescriptor(obj, key);\n\n      if (obj[key].visitedByCircularReferenceRemoval || exports.Util._isElement(obj[key])) {\n        if (desc.configurable) {\n          delete obj[key];\n        } else {\n          return null;\n        }\n      } else if (exports.Util._prepareToStringify(obj[key]) === null) {\n        if (desc.configurable) {\n          delete obj[key];\n        } else {\n          return null;\n        }\n      }\n    }\n\n    delete obj.visitedByCircularReferenceRemoval;\n    return obj;\n  },\n  _assign: function _assign(target, source) {\n    for (var key in source) {\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}