{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\src\\\\Connector.jsx\";\nimport React, { Component } from 'react';\nimport { Arrow } from 'react-konva';\n\nvar Connector =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Connector, _Component);\n\n  function Connector() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Connector);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Connector)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getConnectorPoints = function (stuff) {\n      var points = stuff.points;\n      var from = stuff.from;\n      var to = stuff.to;\n      var mouseX = stuff.mouseX;\n      var mouseY = stuff.mouseY;\n      var point = {\n        x: mouseX,\n        y: mouseY\n      };\n\n      if (stuff.type === 'FromAndTo') {\n        if (to.attrs.name.includes('rect') && from.attrs.name.includes('rect')) {\n          //only works for rect because the calculation for origin is different for ellipse and rect\n          var dy = to.attrs.y + to.attrs.height / 2 - (from.attrs.y + from.attrs.height / 2);\n          var dx = to.attrs.x + to.attrs.width / 2 - (from.attrs.x + from.attrs.width / 2);\n          var theta = Math.atan2(dy, dx);\n\n          var _angle = theta / Math.PI * 180;\n\n          if (_angle <= 45 && _angle >= -45) {\n            points[0] += from.attrs.width;\n            points[1] += from.attrs.height / 2;\n            points[3] += to.attrs.height / 2;\n          } else if (_angle > 45 && _angle < 135) {\n            points[0] += from.attrs.width / 2;\n            points[1] += from.attrs.height;\n            points[2] += to.attrs.width / 2;\n          } else if (_angle > 135 && _angle < 180 || _angle > -180 && _angle < -135) {\n            points[1] += from.attrs.height / 2;\n            points[2] += to.attrs.width;\n            points[3] += to.attrs.height / 2;\n          } else if (_angle < -45 && _angle > -135) {\n            points[0] += from.attrs.width / 2;\n            points[3] += to.attrs.height;\n            points[2] += to.attrs.width / 2;\n          }\n        } else if (to.attrs.name.includes('rect') && from.attrs.name.includes('text')) {\n          //only works for rect because the calculation for origin is different for ellipse and rect\n          var fromTextHeight = from.textHeight || from.attrs.textHeight;\n          var fromTextWidth = from.textWidth || from.attrs.textWidth;\n          dy = to.attrs.y + to.attrs.height / 2 - (from.attrs.y + fromTextHeight / 2);\n          dx = to.attrs.x + to.attrs.width / 2 - (from.attrs.x + fromTextWidth / 2);\n          theta = Math.atan2(dy, dx);\n\n          var _angle2 = theta / Math.PI * 180;\n\n          if (_angle2 <= 45 && _angle2 >= -45) {\n            points[0] += fromTextWidth;\n            points[1] += fromTextHeight / 2;\n            points[3] += to.attrs.height / 2;\n          } else if (_angle2 > 45 && _angle2 < 135) {\n            points[0] += fromTextWidth / 2;\n            points[1] += fromTextHeight;\n            points[2] += to.attrs.width / 2;\n          } else if (_angle2 > 135 && _angle2 < 180 || _angle2 > -180 && _angle2 < -135) {\n            points[1] += fromTextHeight / 2;\n            points[2] += to.attrs.width;\n            points[3] += to.attrs.height / 2;\n          } else if (_angle2 < -45 && _angle2 > -135) {\n            points[0] += fromTextWidth / 2;\n            points[3] += to.attrs.height;\n            points[2] += to.attrs.width / 2;\n          }\n        } else if (to.attrs.name.includes('ellipse') && from.attrs.name.includes('ellipse')) {\n          //two ellipses\n          var origin = {\n            x: from.attrs.x,\n            y: from.attrs.y\n          };\n\n          var _dy = points[3] - points[1];\n\n          var _dx = points[2] - points[0];\n\n          var _angle3 = Math.atan2(-_dy, _dx);\n\n          points[0] += -from.attrs.radiusX * Math.cos(_angle3 + Math.PI);\n          points[1] += from.attrs.radiusY * Math.sin(_angle3 + Math.PI);\n          points[2] += to.attrs.radiusX * Math.cos(_angle3 + Math.PI);\n          points[3] -= to.attrs.radiusY * Math.sin(_angle3 + Math.PI);\n        } else if (to.attrs.name.includes('star') && from.attrs.name.includes('star')) {\n          origin = {\n            x: from.attrs.x,\n            y: from.attrs.y\n          };\n          dy = points[3] - points[1];\n          dx = points[2] - points[0];\n\n          var _angle4 = Math.atan2(-dy, dx);\n\n          points[0] += -from.attrs.outerRadius * Math.cos(_angle4 + Math.PI);\n          points[1] += from.attrs.outerRadius * Math.sin(_angle4 + Math.PI);\n          points[2] += to.attrs.outerRadius * Math.cos(_angle4 + Math.PI);\n          points[3] -= to.attrs.outerRadius * Math.sin(_angle4 + Math.PI);\n        } else if (to.attrs.name.includes('text') && from.attrs.name.includes('text')) {\n          var _fromTextHeight = from.textHeight || from.attrs.textHeight;\n\n          var _fromTextWidth = from.textWidth || from.attrs.textWidth;\n\n          var toTextHeight = to.textHeight || to.attrs.textHeight;\n          var toTextWidth = to.textWidth || to.attrs.textWidth;\n          dy = to.attrs.y + toTextHeight / 2 - (from.attrs.y + _fromTextHeight / 2);\n          dx = to.attrs.x + toTextWidth / 2 - (from.attrs.x + _fromTextWidth / 2);\n          theta = Math.atan2(dy, dx);\n\n          var _angle5 = theta / Math.PI * 180;\n\n          if (_angle5 <= 45 && _angle5 >= -45) {\n            points[0] += _fromTextWidth;\n            points[1] += _fromTextHeight / 2;\n            points[3] += toTextHeight / 2;\n          } else if (_angle5 > 45 && _angle5 < 135) {\n            points[0] += _fromTextWidth / 2;\n            points[1] += _fromTextHeight;\n            points[2] += toTextWidth / 2;\n          } else if (_angle5 > 135 && _angle5 < 180 || _angle5 > -180 && _angle5 < -135) {\n            points[1] += _fromTextHeight / 2;\n            points[2] += toTextWidth;\n            points[3] += toTextHeight / 2;\n          } else if (_angle5 < -45 && _angle5 > -135) {\n            points[0] += _fromTextWidth / 2;\n            points[3] += toTextHeight;\n            points[2] += toTextWidth / 2;\n          }\n        } else if (from.attrs.name.includes('rect') && to.attrs.name.includes('ellipse')) {\n          //rect change\n          var dy1 = to.attrs.y + -(from.attrs.y + from.attrs.height / 2);\n          var dx1 = to.attrs.x + -(from.attrs.x + from.attrs.width / 2);\n          theta = Math.atan2(dy1, dx1);\n          var angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[0] += from.attrs.width / 2;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[0] += from.attrs.width / 2;\n            points[1] += from.attrs.height;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[1] += from.attrs.height / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[0] += from.attrs.width;\n            points[1] += from.attrs.height / 2;\n          } //ellipse change\n\n\n          var _dy2 = points[3] - points[1];\n\n          var _dx2 = points[2] - points[0];\n\n          angle = Math.atan2(-_dy2, _dx2); //      console.log(dy, dx);\n\n          points[2] += to.attrs.radiusX * Math.cos(angle + Math.PI);\n          points[3] -= to.attrs.radiusY * Math.sin(angle + Math.PI);\n        } else if (from.attrs.name.includes('rect') && to.attrs.name.includes('star')) {\n          //rect change\n          dy1 = to.attrs.y + -(from.attrs.y + from.attrs.height / 2);\n          dx1 = to.attrs.x + -(from.attrs.x + from.attrs.width / 2);\n          theta = Math.atan2(dy1, dx1);\n          angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[0] += from.attrs.width / 2;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[0] += from.attrs.width / 2;\n            points[1] += from.attrs.height;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[1] += from.attrs.height / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[0] += from.attrs.width;\n            points[1] += from.attrs.height / 2;\n          } //ellipse change\n\n\n          var _dy3 = points[3] - points[1];\n\n          var _dx3 = points[2] - points[0];\n\n          angle = Math.atan2(-_dy3, _dx3); //      console.log(dy, dx);\n\n          points[2] += to.attrs.outerRadius * Math.cos(angle + Math.PI);\n          points[3] -= to.attrs.outerRadius * Math.sin(angle + Math.PI);\n        } else if (from.attrs.name.includes('rect') && to.attrs.name.includes('text')) {\n          //only works for rect because the calculation for origin is different for ellipse and rect\n          var _toTextHeight = to.textHeight || to.attrs.textHeight;\n\n          var _toTextWidth = to.textWidth || to.attrs.textWidth;\n\n          console.log(to);\n          dy = to.attrs.y + _toTextHeight / 2 - (from.attrs.y + from.attrs.height / 2);\n          dx = to.attrs.x + _toTextWidth / 2 - (from.attrs.x + from.attrs.width / 2);\n          var theta = Math.atan2(dy, dx);\n\n          var _angle6 = theta / Math.PI * 180;\n          /*  console.log(\r\n              'from rect and to text',\r\n              'angle: ',\r\n              angle,\r\n              'from',\r\n              from,\r\n              'to',\r\n              to\r\n          )*/\n\n\n          if (_angle6 <= 45 && _angle6 >= -45) {\n            points[0] += from.attrs.width;\n            points[1] += from.attrs.height / 2;\n            points[3] += _toTextHeight / 2;\n          } else if (_angle6 > 45 && _angle6 < 135) {\n            points[0] += from.attrs.width / 2;\n            points[1] += from.attrs.height;\n            points[2] += _toTextWidth / 2;\n          } else if (_angle6 > 135 && _angle6 < 180 || _angle6 > -180 && _angle6 < -135) {\n            points[1] += from.attrs.height / 2;\n            points[2] += _toTextWidth;\n            points[3] += _toTextHeight / 2;\n          } else if (_angle6 < -45 && _angle6 > -135) {\n            points[0] += from.attrs.width / 2;\n            points[3] += _toTextHeight;\n            points[2] += _toTextWidth / 2;\n          }\n        } else if (from.attrs.name.includes('ellipse') && to.attrs.name.includes('rect')) {\n          //rect change\n          dy1 = to.attrs.y + to.attrs.height / 2 - from.attrs.y;\n          dx1 = to.attrs.x + to.attrs.width / 2 - from.attrs.x;\n          theta = Math.atan2(dy1, dx1);\n          angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[2] += to.attrs.width / 2;\n            points[3] += to.attrs.height;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[2] += to.attrs.width / 2;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[2] += to.attrs.width;\n            points[3] += to.attrs.height / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[3] += to.attrs.height / 2;\n          } //ellipse change\n\n\n          var _dy4 = points[3] - points[1];\n\n          var _dx4 = points[2] - points[0];\n\n          angle = Math.atan2(-_dy4, _dx4); //      console.log(dy, dx);\n\n          points[0] -= from.attrs.radiusX * Math.cos(angle + Math.PI);\n          points[1] += from.attrs.radiusY * Math.sin(angle + Math.PI);\n        } else if (from.attrs.name.includes('ellipse') && to.attrs.name.includes('text')) {\n          var _toTextHeight2 = to.textHeight || to.attrs.textHeight;\n\n          var _toTextWidth2 = to.textWidth || to.attrs.textWidth; //rect change\n\n\n          dy1 = to.attrs.y + _toTextHeight2 / 2 - from.attrs.y;\n          dx1 = to.attrs.x + _toTextWidth2 / 2 - from.attrs.x;\n          theta = Math.atan2(dy1, dx1);\n          angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[2] += _toTextWidth2 / 2;\n            points[3] += _toTextHeight2;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[2] += _toTextWidth2 / 2;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[2] += _toTextWidth2;\n            points[3] += _toTextHeight2 / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[3] += _toTextHeight2 / 2;\n          } //ellipse change\n\n\n          var _dy5 = points[3] - points[1];\n\n          var _dx5 = points[2] - points[0];\n\n          angle = Math.atan2(-_dy5, _dx5); //      console.log(dy, dx);\n\n          points[0] -= from.attrs.radiusX * Math.cos(angle + Math.PI);\n          points[1] += from.attrs.radiusY * Math.sin(angle + Math.PI);\n          console.log('new points', points, 'from', from, 'from coord', from.attrs);\n        } else if (from.attrs.name.includes('ellipse') && to.attrs.name.includes('star')) {\n          //two ellipses\n          origin = {\n            x: from.attrs.x,\n            y: from.attrs.y\n          };\n\n          var _dy6 = points[3] - points[1];\n\n          var _dx6 = points[2] - points[0];\n\n          var _angle7 = Math.atan2(-_dy6, _dx6);\n\n          points[0] += -from.attrs.radiusX * Math.cos(_angle7 + Math.PI);\n          points[1] += from.attrs.radiusY * Math.sin(_angle7 + Math.PI);\n          points[2] += to.attrs.outerRadius * Math.cos(_angle7 + Math.PI);\n          points[3] -= to.attrs.outerRadius * Math.sin(_angle7 + Math.PI);\n        } else if (from.attrs.name.includes('star') && to.attrs.name.includes('ellipse')) {\n          //two ellipses\n          origin = {\n            x: from.attrs.x,\n            y: from.attrs.y\n          };\n\n          var _dy7 = points[3] - points[1];\n\n          var _dx7 = points[2] - points[0];\n\n          var _angle8 = Math.atan2(-_dy7, _dx7);\n\n          points[0] += -from.attrs.outerRadius * Math.cos(_angle8 + Math.PI);\n          points[1] += from.attrs.outerRadius * Math.sin(_angle8 + Math.PI);\n          points[2] += to.attrs.radiusX * Math.cos(_angle8 + Math.PI);\n          points[3] -= to.attrs.radiusY * Math.sin(_angle8 + Math.PI);\n        } else if (from.attrs.name.includes('star') && to.attrs.name.includes('rect')) {\n          //two ellipses\n          dy1 = to.attrs.y + to.attrs.width / 2 - from.attrs.y;\n          dx1 = to.attrs.x + to.attrs.width / 2 - from.attrs.x;\n          theta = Math.atan2(dy1, dx1);\n          angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[2] += to.attrs.width / 2;\n            points[3] += to.attrs.height;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[2] += to.attrs.width / 2;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[2] += to.attrs.width;\n            points[3] += to.attrs.height / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[3] += to.attrs.width / 2;\n          } //ellipse change\n\n\n          var _dy8 = points[3] - points[1];\n\n          var _dx8 = points[2] - points[0];\n\n          angle = Math.atan2(-_dy8, _dx8); //      console.log(dy, dx);\n\n          points[0] -= from.attrs.outerRadius * Math.cos(angle + Math.PI);\n          points[1] += from.attrs.outerRadius * Math.sin(angle + Math.PI);\n        } else if (from.attrs.name.includes('star') && to.attrs.name.includes('text')) {\n          var _toTextHeight3 = to.textHeight || to.attrs.textHeight;\n\n          var _toTextWidth3 = to.textWidth || to.attrs.textWidth; //two ellipses\n\n\n          dy1 = to.attrs.y + _toTextHeight3 / 2 - from.attrs.y;\n          dx1 = to.attrs.x + _toTextWidth3 / 2 - from.attrs.x;\n          theta = Math.atan2(dy1, dx1);\n          angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[2] += _toTextWidth3 / 2;\n            points[3] += _toTextHeight3;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[2] += _toTextWidth3 / 2;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[2] += _toTextWidth3;\n            points[3] += _toTextHeight3 / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[3] += _toTextHeight3 / 2;\n          } //ellipse change\n\n\n          var _dy9 = points[3] - points[1];\n\n          var _dx9 = points[2] - points[0];\n\n          angle = Math.atan2(-_dy9, _dx9); //      console.log(dy, dx);\n\n          points[0] -= from.attrs.outerRadius * Math.cos(angle + Math.PI);\n          points[1] += from.attrs.outerRadius * Math.sin(angle + Math.PI);\n        } else if (from.attrs.name.includes('text') && to.attrs.name.includes('star')) {\n          var _fromTextHeight2 = from.textHeight || from.attrs.textHeight;\n\n          var _fromTextWidth2 = from.textWidth || from.attrs.textWidth; //rect change\n\n\n          dy1 = to.attrs.y + -(from.attrs.y + _fromTextHeight2 / 2);\n          dx1 = to.attrs.x + -(from.attrs.x + _fromTextWidth2 / 2);\n          theta = Math.atan2(dy1, dx1);\n          angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[0] += _fromTextWidth2 / 2;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[0] += _fromTextWidth2 / 2;\n            points[1] += _fromTextHeight2;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[1] += _fromTextHeight2 / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[0] += _fromTextWidth2;\n            points[1] += _fromTextHeight2 / 2;\n          } //ellipse change\n\n\n          var _dy10 = points[3] - points[1];\n\n          var _dx10 = points[2] - points[0];\n\n          angle = Math.atan2(-_dy10, _dx10); //      console.log(dy, dx);\n\n          points[2] += to.attrs.outerRadius * Math.cos(angle + Math.PI);\n          points[3] -= to.attrs.outerRadius * Math.sin(angle + Math.PI);\n        } else if (from.attrs.name.includes('text') && to.attrs.name.includes('ellipse')) {\n          var _fromTextHeight3 = from.textHeight || from.attrs.textHeight;\n\n          var _fromTextWidth3 = from.textWidth || from.attrs.textWidth; //rect change\n\n\n          dy1 = to.attrs.y + -(from.attrs.y + _fromTextHeight3 / 2);\n          dx1 = to.attrs.x + -(from.attrs.x + _fromTextWidth3 / 2);\n          theta = Math.atan2(dy1, dx1);\n          angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[0] += _fromTextWidth3 / 2;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[0] += _fromTextWidth3 / 2;\n            points[1] += _fromTextHeight3;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[1] += _fromTextHeight3 / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[0] += _fromTextWidth3;\n            points[1] += _fromTextHeight3 / 2;\n          } //ellipse change\n\n\n          var _dy11 = points[3] - points[1];\n\n          var _dx11 = points[2] - points[0];\n\n          angle = Math.atan2(-_dy11, _dx11); //      console.log(dy, dx);\n\n          points[2] += to.attrs.radiusX * Math.cos(angle + Math.PI);\n          points[3] -= to.attrs.radiusY * Math.sin(angle + Math.PI);\n        }\n      }\n\n      if (stuff.type === 'onlyFrom') {\n        if (from.attrs.name.includes('rect')) {\n          origin = {\n            x: from.attrs.x + from.attrs.width / 2,\n            y: from.attrs.y + from.attrs.height / 2\n          };\n          dy = point.y - origin.y;\n          dx = point.x - origin.x;\n          theta = Math.atan2(dy, dx);\n          angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[0] += from.attrs.width / 2;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[0] += from.attrs.width / 2;\n            points[1] += from.attrs.height;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[1] += from.attrs.height / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[0] += from.attrs.width;\n            points[1] += from.attrs.height / 2;\n          }\n        } else if (from.attrs.name.includes('ellipse')) {\n          origin = {\n            x: from.attrs.x,\n            y: from.attrs.y\n          };\n\n          var _dy12 = points[3] - points[1];\n\n          var _dx12 = points[2] - points[0];\n\n          var _angle9 = Math.atan2(-_dy12, _dx12); //  console.log(\"we messing with a ellipse\", points, angle, from);\n\n\n          points[0] += -from.attrs.radiusX * Math.cos(_angle9 + Math.PI);\n          points[1] += from.attrs.radiusY * Math.sin(_angle9 + Math.PI);\n        } else if (from.attrs.name.includes('star')) {\n          origin = {\n            x: from.attrs.x,\n            y: from.attrs.y\n          };\n\n          var _dy13 = points[3] - points[1];\n\n          var _dx13 = points[2] - points[0];\n\n          var _angle10 = Math.atan2(-_dy13, _dx13); //  console.log(\"we messing with a ellipse\", points, angle, from);\n\n\n          points[0] += -from.attrs.outerRadius * Math.cos(_angle10 + Math.PI);\n          points[1] += from.attrs.outerRadius * Math.sin(_angle10 + Math.PI);\n        } else if (from.attrs.name.includes('text')) {\n          var _fromTextHeight4 = from.textHeight || from.attrs.textHeight;\n\n          var _fromTextWidth4 = from.textWidth || from.attrs.textWidth;\n\n          origin = {\n            x: from.attrs.x + _fromTextWidth4 / 2,\n            y: from.attrs.y + _fromTextWidth4 / 2\n          };\n          dy = point.y - origin.y;\n          dx = point.x - origin.x;\n          theta = Math.atan2(dy, dx);\n          angle = theta / Math.PI * 180;\n\n          if (angle <= -45 && angle >= -135) {\n            //top\n            points[0] += _fromTextWidth4 / 2;\n          } else if (angle > 45 && angle < 135) {\n            //bottom\n            points[0] += _fromTextWidth4 / 2;\n            points[1] += _fromTextHeight4;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            //left\n            points[1] += _fromTextHeight4 / 2;\n          } else if (angle > -45 && angle < 45) {\n            points[0] += _fromTextWidth4;\n            points[1] += _fromTextHeight4 / 2;\n          }\n        }\n      }\n\n      if (stuff.type === 'onlyTo') {\n        if (to.attrs.name.includes('rect')) {\n          var endPoint = {\n            x: points[0],\n            y: points[1]\n          };\n          origin = {\n            x: to.attrs.x + to.attrs.width / 2,\n            y: to.attrs.y + to.attrs.height / 2\n          };\n          dy = endPoint.y - origin.y;\n          dx = endPoint.x - origin.x;\n          theta = Math.atan2(dy, dx);\n          angle = theta / Math.PI * 180;\n\n          if (angle > 45 && angle < 135) {\n            points[2] += to.attrs.width / 2;\n            points[3] += to.attrs.height;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            points[3] += to.attrs.height / 2;\n          } else if (angle > -135 && angle < -45) {\n            points[2] += to.attrs.width / 2;\n          } else {\n            points[2] += to.attrs.width;\n            points[3] += to.attrs.height / 2;\n          }\n        } else if (to.attrs.name.includes('ellipse')) {\n          var _dy14 = points[3] - points[1];\n\n          var _dx14 = points[2] - points[0];\n\n          var _angle11 = Math.atan2(-_dy14, _dx14); //      console.log(dy, dx);\n\n\n          points[2] += to.attrs.radiusX * Math.cos(_angle11 + Math.PI);\n          points[3] -= to.attrs.radiusY * Math.sin(_angle11 + Math.PI);\n        } else if (to.attrs.name.includes('star')) {\n          var _dy15 = points[3] - points[1];\n\n          var _dx15 = points[2] - points[0];\n\n          var _angle12 = Math.atan2(-_dy15, _dx15); //      console.log(dy, dx);\n\n\n          points[2] += to.attrs.outerRadius * Math.cos(_angle12 + Math.PI);\n          points[3] -= to.attrs.outerRadius * Math.sin(_angle12 + Math.PI);\n        } else if (to.attrs.name.includes('text')) {\n          var _toTextHeight4 = to.textHeight || to.attrs.textHeight;\n\n          var _toTextWidth4 = to.textWidth || to.attrs.textWidth;\n\n          endPoint = {\n            x: points[0],\n            y: points[1]\n          };\n          origin = {\n            x: to.attrs.x + _toTextWidth4 / 2,\n            y: to.attrs.y + _toTextWidth4 / 2\n          };\n          dy = endPoint.y - origin.y;\n          dx = endPoint.x - origin.x;\n          theta = Math.atan2(dy, dx);\n          angle = theta / Math.PI * 180;\n\n          if (angle > 45 && angle < 135) {\n            points[2] += _toTextWidth4 / 2;\n            points[3] += _toTextHeight4;\n          } else if (angle > 135 && angle < 180 || angle > -180 && angle < -135) {\n            points[3] += _toTextHeight4 / 2;\n          } else if (angle > -135 && angle < -45) {\n            points[2] += _toTextWidth4 / 2;\n          } else {\n            points[2] += _toTextHeight4;\n            points[3] += _toTextHeight4 / 2;\n          }\n        }\n      }\n\n      return points;\n    };\n\n    return _this;\n  }\n\n  _createClass(Connector, [{\n    key: \"render\",\n    value: function render() {\n      var points = null;\n\n      if (this.props.current) {\n        if (this.props.from) {\n          points = [this.props.from.attrs.x, this.props.from.attrs.y, this.props.arrowEndX, this.props.arrowEndY];\n          var stuff = {\n            points: points,\n            from: this.props.from,\n            mouseX: this.props.arrowEndX,\n            mouseY: this.props.arrowEndY,\n            type: 'onlyFrom'\n          };\n          points = this.getConnectorPoints(stuff);\n        }\n      }\n\n      if (this.props.current === false) {\n        if (this.props.from && this.props.to) {\n          points = [this.props.from.attrs.x, this.props.from.attrs.y, this.props.to.attrs.x, this.props.to.attrs.y];\n          var toSend = {\n            points: points,\n            from: this.props.from,\n            to: this.props.to,\n            type: 'FromAndTo'\n          };\n          points = this.getConnectorPoints(toSend); //get connector points\n        } else if (this.props.from) {\n          points = [this.props.from.attrs.x, this.props.from.attrs.y, this.props.points[2], this.props.points[3]];\n          var _stuff = {\n            points: points,\n            from: this.props.from,\n            mouseX: this.props.points[2],\n            mouseY: this.props.points[3],\n            type: 'onlyFrom'\n          };\n          points = this.getConnectorPoints(_stuff);\n        } else if (this.props.to) {\n          points = [this.props.points[0], this.props.points[1], this.props.to.attrs.x, this.props.to.attrs.y];\n          var _stuff2 = {\n            points: points,\n            to: this.props.to,\n            type: 'onlyTo',\n            mouseX: this.props.to.attrs.x,\n            mouseY: this.props.to.attrs.y\n          };\n          points = this.getConnectorPoints(_stuff2);\n        }\n      }\n\n      return React.createElement(Arrow, {\n        name: this.props.name,\n        points: points,\n        strokeWidth: 1.5,\n        stroke: this.props.stroke,\n        fill: this.props.fill,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 770\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Connector;\n}(Component);\n\nexport default Connector;","map":{"version":3,"sources":["C:\\Users\\andre\\Desktop\\Great React Projects\\livesearch\\src\\Connector.jsx"],"names":["React","Component","Arrow","Connector","getConnectorPoints","stuff","points","from","to","mouseX","mouseY","point","x","y","type","attrs","name","includes","dy","height","dx","width","theta","Math","atan2","angle","PI","fromTextHeight","textHeight","fromTextWidth","textWidth","origin","radiusX","cos","radiusY","sin","outerRadius","toTextHeight","toTextWidth","dy1","dx1","console","log","endPoint","props","current","arrowEndX","arrowEndY","toSend","stroke","fill"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { Arrow } from 'react-konva'\r\nclass Connector extends Component {\r\n    /*******uses current position of two shapes to determine the points of an arrow\r\n     ******************************************************************************/\r\n\r\n    getConnectorPoints = stuff => {\r\n        var points = stuff.points\r\n        var from = stuff.from\r\n        var to = stuff.to\r\n        var mouseX = stuff.mouseX\r\n        var mouseY = stuff.mouseY\r\n        var point = { x: mouseX, y: mouseY }\r\n\r\n        if (stuff.type === 'FromAndTo') {\r\n            if (\r\n                to.attrs.name.includes('rect') &&\r\n                from.attrs.name.includes('rect')\r\n            ) {\r\n                //only works for rect because the calculation for origin is different for ellipse and rect\r\n                var dy =\r\n                    to.attrs.y +\r\n                    to.attrs.height / 2 -\r\n                    (from.attrs.y + from.attrs.height / 2)\r\n                var dx =\r\n                    to.attrs.x +\r\n                    to.attrs.width / 2 -\r\n                    (from.attrs.x + from.attrs.width / 2)\r\n                var theta = Math.atan2(dy, dx)\r\n                let angle = (theta / Math.PI) * 180\r\n\r\n                if (angle <= 45 && angle >= -45) {\r\n                    points[0] += from.attrs.width\r\n                    points[1] += from.attrs.height / 2\r\n                    points[3] += to.attrs.height / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    points[0] += from.attrs.width / 2\r\n                    points[1] += from.attrs.height\r\n                    points[2] += to.attrs.width / 2\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    points[1] += from.attrs.height / 2\r\n                    points[2] += to.attrs.width\r\n                    points[3] += to.attrs.height / 2\r\n                } else if (angle < -45 && angle > -135) {\r\n                    points[0] += from.attrs.width / 2\r\n                    points[3] += to.attrs.height\r\n                    points[2] += to.attrs.width / 2\r\n                }\r\n            } else if (\r\n                to.attrs.name.includes('rect') &&\r\n                from.attrs.name.includes('text')\r\n            ) {\r\n                //only works for rect because the calculation for origin is different for ellipse and rect\r\n\r\n                let fromTextHeight = from.textHeight || from.attrs.textHeight\r\n                let fromTextWidth = from.textWidth || from.attrs.textWidth\r\n                dy =\r\n                    to.attrs.y +\r\n                    to.attrs.height / 2 -\r\n                    (from.attrs.y + fromTextHeight / 2)\r\n                dx =\r\n                    to.attrs.x +\r\n                    to.attrs.width / 2 -\r\n                    (from.attrs.x + fromTextWidth / 2)\r\n                theta = Math.atan2(dy, dx)\r\n                let angle = (theta / Math.PI) * 180\r\n\r\n                if (angle <= 45 && angle >= -45) {\r\n                    points[0] += fromTextWidth\r\n                    points[1] += fromTextHeight / 2\r\n                    points[3] += to.attrs.height / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    points[0] += fromTextWidth / 2\r\n                    points[1] += fromTextHeight\r\n                    points[2] += to.attrs.width / 2\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    points[1] += fromTextHeight / 2\r\n                    points[2] += to.attrs.width\r\n                    points[3] += to.attrs.height / 2\r\n                } else if (angle < -45 && angle > -135) {\r\n                    points[0] += fromTextWidth / 2\r\n                    points[3] += to.attrs.height\r\n                    points[2] += to.attrs.width / 2\r\n                }\r\n            } else if (\r\n                to.attrs.name.includes('ellipse') &&\r\n                from.attrs.name.includes('ellipse')\r\n            ) {\r\n                //two ellipses\r\n                var origin = { x: from.attrs.x, y: from.attrs.y }\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                let angle = Math.atan2(-dy, dx)\r\n                points[0] += -from.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.radiusY * Math.sin(angle + Math.PI)\r\n                points[2] += to.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.radiusY * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                to.attrs.name.includes('star') &&\r\n                from.attrs.name.includes('star')\r\n            ) {\r\n                origin = { x: from.attrs.x, y: from.attrs.y }\r\n                dy = points[3] - points[1]\r\n                dx = points[2] - points[0]\r\n                let angle = Math.atan2(-dy, dx)\r\n                points[0] += -from.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n                points[2] += to.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                to.attrs.name.includes('text') &&\r\n                from.attrs.name.includes('text')\r\n            ) {\r\n                let fromTextHeight = from.textHeight || from.attrs.textHeight\r\n                let fromTextWidth = from.textWidth || from.attrs.textWidth\r\n                let toTextHeight = to.textHeight || to.attrs.textHeight\r\n                let toTextWidth = to.textWidth || to.attrs.textWidth\r\n                dy =\r\n                    to.attrs.y +\r\n                    toTextHeight / 2 -\r\n                    (from.attrs.y + fromTextHeight / 2)\r\n                dx =\r\n                    to.attrs.x +\r\n                    toTextWidth / 2 -\r\n                    (from.attrs.x + fromTextWidth / 2)\r\n                theta = Math.atan2(dy, dx)\r\n                let angle = (theta / Math.PI) * 180\r\n\r\n                if (angle <= 45 && angle >= -45) {\r\n                    points[0] += fromTextWidth\r\n                    points[1] += fromTextHeight / 2\r\n                    points[3] += toTextHeight / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    points[0] += fromTextWidth / 2\r\n                    points[1] += fromTextHeight\r\n                    points[2] += toTextWidth / 2\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    points[1] += fromTextHeight / 2\r\n                    points[2] += toTextWidth\r\n                    points[3] += toTextHeight / 2\r\n                } else if (angle < -45 && angle > -135) {\r\n                    points[0] += fromTextWidth / 2\r\n                    points[3] += toTextHeight\r\n                    points[2] += toTextWidth / 2\r\n                }\r\n            } else if (\r\n                from.attrs.name.includes('rect') &&\r\n                to.attrs.name.includes('ellipse')\r\n            ) {\r\n                //rect change\r\n                var dy1 = to.attrs.y + -(from.attrs.y + from.attrs.height / 2)\r\n                var dx1 = to.attrs.x + -(from.attrs.x + from.attrs.width / 2)\r\n\r\n                theta = Math.atan2(dy1, dx1)\r\n                var angle = (theta / Math.PI) * 180\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[0] += from.attrs.width / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[0] += from.attrs.width / 2\r\n                    points[1] += from.attrs.height\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[1] += from.attrs.height / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[0] += from.attrs.width\r\n                    points[1] += from.attrs.height / 2\r\n                }\r\n                //ellipse change\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[2] += to.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.radiusY * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                from.attrs.name.includes('rect') &&\r\n                to.attrs.name.includes('star')\r\n            ) {\r\n                //rect change\r\n                dy1 = to.attrs.y + -(from.attrs.y + from.attrs.height / 2)\r\n                dx1 = to.attrs.x + -(from.attrs.x + from.attrs.width / 2)\r\n\r\n                theta = Math.atan2(dy1, dx1)\r\n                angle = (theta / Math.PI) * 180\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[0] += from.attrs.width / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[0] += from.attrs.width / 2\r\n                    points[1] += from.attrs.height\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[1] += from.attrs.height / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[0] += from.attrs.width\r\n                    points[1] += from.attrs.height / 2\r\n                }\r\n                //ellipse change\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[2] += to.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                from.attrs.name.includes('rect') &&\r\n                to.attrs.name.includes('text')\r\n            ) {\r\n                //only works for rect because the calculation for origin is different for ellipse and rect\r\n                let toTextHeight = to.textHeight || to.attrs.textHeight\r\n                let toTextWidth = to.textWidth || to.attrs.textWidth\r\n                console.log(to)\r\n                dy =\r\n                    to.attrs.y +\r\n                    toTextHeight / 2 -\r\n                    (from.attrs.y + from.attrs.height / 2)\r\n                dx =\r\n                    to.attrs.x +\r\n                    toTextWidth / 2 -\r\n                    (from.attrs.x + from.attrs.width / 2)\r\n                var theta = Math.atan2(dy, dx)\r\n                let angle = (theta / Math.PI) * 180\r\n\r\n                /*  console.log(\r\n                    'from rect and to text',\r\n                    'angle: ',\r\n                    angle,\r\n                    'from',\r\n                    from,\r\n                    'to',\r\n                    to\r\n                )*/\r\n\r\n                if (angle <= 45 && angle >= -45) {\r\n                    points[0] += from.attrs.width\r\n                    points[1] += from.attrs.height / 2\r\n                    points[3] += toTextHeight / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    points[0] += from.attrs.width / 2\r\n                    points[1] += from.attrs.height\r\n                    points[2] += toTextWidth / 2\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    points[1] += from.attrs.height / 2\r\n                    points[2] += toTextWidth\r\n                    points[3] += toTextHeight / 2\r\n                } else if (angle < -45 && angle > -135) {\r\n                    points[0] += from.attrs.width / 2\r\n                    points[3] += toTextHeight\r\n                    points[2] += toTextWidth / 2\r\n                }\r\n            } else if (\r\n                from.attrs.name.includes('ellipse') &&\r\n                to.attrs.name.includes('rect')\r\n            ) {\r\n                //rect change\r\n                dy1 = to.attrs.y + to.attrs.height / 2 - from.attrs.y\r\n                dx1 = to.attrs.x + to.attrs.width / 2 - from.attrs.x\r\n\r\n                theta = Math.atan2(dy1, dx1)\r\n                angle = (theta / Math.PI) * 180\r\n\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[2] += to.attrs.width / 2\r\n                    points[3] += to.attrs.height\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[2] += to.attrs.width / 2\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[2] += to.attrs.width\r\n                    points[3] += to.attrs.height / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[3] += to.attrs.height / 2\r\n                }\r\n                //ellipse change\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[0] -= from.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.radiusY * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                from.attrs.name.includes('ellipse') &&\r\n                to.attrs.name.includes('text')\r\n            ) {\r\n                let toTextHeight = to.textHeight || to.attrs.textHeight\r\n                let toTextWidth = to.textWidth || to.attrs.textWidth\r\n                //rect change\r\n                dy1 = to.attrs.y + toTextHeight / 2 - from.attrs.y\r\n                dx1 = to.attrs.x + toTextWidth / 2 - from.attrs.x\r\n\r\n                theta = Math.atan2(dy1, dx1)\r\n                angle = (theta / Math.PI) * 180\r\n\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[2] += toTextWidth / 2\r\n                    points[3] += toTextHeight\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[2] += toTextWidth / 2\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[2] += toTextWidth\r\n                    points[3] += toTextHeight / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[3] += toTextHeight / 2\r\n                }\r\n                //ellipse change\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[0] -= from.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.radiusY * Math.sin(angle + Math.PI)\r\n\r\n                console.log(\r\n                    'new points',\r\n                    points,\r\n                    'from',\r\n                    from,\r\n                    'from coord',\r\n                    from.attrs\r\n                )\r\n            } else if (\r\n                from.attrs.name.includes('ellipse') &&\r\n                to.attrs.name.includes('star')\r\n            ) {\r\n                //two ellipses\r\n                origin = { x: from.attrs.x, y: from.attrs.y }\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                let angle = Math.atan2(-dy, dx)\r\n                points[0] += -from.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.radiusY * Math.sin(angle + Math.PI)\r\n                points[2] += to.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                from.attrs.name.includes('star') &&\r\n                to.attrs.name.includes('ellipse')\r\n            ) {\r\n                //two ellipses\r\n                origin = { x: from.attrs.x, y: from.attrs.y }\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                let angle = Math.atan2(-dy, dx)\r\n                points[0] += -from.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n                points[2] += to.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.radiusY * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                from.attrs.name.includes('star') &&\r\n                to.attrs.name.includes('rect')\r\n            ) {\r\n                //two ellipses\r\n                dy1 = to.attrs.y + to.attrs.width / 2 - from.attrs.y\r\n                dx1 = to.attrs.x + to.attrs.width / 2 - from.attrs.x\r\n\r\n                theta = Math.atan2(dy1, dx1)\r\n                angle = (theta / Math.PI) * 180\r\n\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[2] += to.attrs.width / 2\r\n                    points[3] += to.attrs.height\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[2] += to.attrs.width / 2\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[2] += to.attrs.width\r\n                    points[3] += to.attrs.height / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[3] += to.attrs.width / 2\r\n                }\r\n                //ellipse change\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[0] -= from.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                from.attrs.name.includes('star') &&\r\n                to.attrs.name.includes('text')\r\n            ) {\r\n                let toTextHeight = to.textHeight || to.attrs.textHeight\r\n                let toTextWidth = to.textWidth || to.attrs.textWidth\r\n                //two ellipses\r\n                dy1 = to.attrs.y + toTextHeight / 2 - from.attrs.y\r\n                dx1 = to.attrs.x + toTextWidth / 2 - from.attrs.x\r\n\r\n                theta = Math.atan2(dy1, dx1)\r\n                angle = (theta / Math.PI) * 180\r\n\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[2] += toTextWidth / 2\r\n                    points[3] += toTextHeight\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[2] += toTextWidth / 2\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[2] += toTextWidth\r\n                    points[3] += toTextHeight / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[3] += toTextHeight / 2\r\n                }\r\n                //ellipse change\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[0] -= from.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                from.attrs.name.includes('text') &&\r\n                to.attrs.name.includes('star')\r\n            ) {\r\n                let fromTextHeight = from.textHeight || from.attrs.textHeight\r\n                let fromTextWidth = from.textWidth || from.attrs.textWidth\r\n                //rect change\r\n                dy1 = to.attrs.y + -(from.attrs.y + fromTextHeight / 2)\r\n                dx1 = to.attrs.x + -(from.attrs.x + fromTextWidth / 2)\r\n\r\n                theta = Math.atan2(dy1, dx1)\r\n                angle = (theta / Math.PI) * 180\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[0] += fromTextWidth / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[0] += fromTextWidth / 2\r\n                    points[1] += fromTextHeight\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[1] += fromTextHeight / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[0] += fromTextWidth\r\n                    points[1] += fromTextHeight / 2\r\n                }\r\n                //ellipse change\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[2] += to.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n            } else if (\r\n                from.attrs.name.includes('text') &&\r\n                to.attrs.name.includes('ellipse')\r\n            ) {\r\n                let fromTextHeight = from.textHeight || from.attrs.textHeight\r\n                let fromTextWidth = from.textWidth || from.attrs.textWidth\r\n                //rect change\r\n                dy1 = to.attrs.y + -(from.attrs.y + fromTextHeight / 2)\r\n                dx1 = to.attrs.x + -(from.attrs.x + fromTextWidth / 2)\r\n\r\n                theta = Math.atan2(dy1, dx1)\r\n                angle = (theta / Math.PI) * 180\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[0] += fromTextWidth / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[0] += fromTextWidth / 2\r\n                    points[1] += fromTextHeight\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[1] += fromTextHeight / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[0] += fromTextWidth\r\n                    points[1] += fromTextHeight / 2\r\n                }\r\n                //ellipse change\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[2] += to.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.radiusY * Math.sin(angle + Math.PI)\r\n            }\r\n        }\r\n\r\n        if (stuff.type === 'onlyFrom') {\r\n            if (from.attrs.name.includes('rect')) {\r\n                origin = {\r\n                    x: from.attrs.x + from.attrs.width / 2,\r\n                    y: from.attrs.y + from.attrs.height / 2\r\n                }\r\n                dy = point.y - origin.y\r\n                dx = point.x - origin.x\r\n                theta = Math.atan2(dy, dx)\r\n                angle = (theta / Math.PI) * 180\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[0] += from.attrs.width / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[0] += from.attrs.width / 2\r\n                    points[1] += from.attrs.height\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[1] += from.attrs.height / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[0] += from.attrs.width\r\n                    points[1] += from.attrs.height / 2\r\n                }\r\n            } else if (from.attrs.name.includes('ellipse')) {\r\n                origin = {\r\n                    x: from.attrs.x,\r\n                    y: from.attrs.y\r\n                }\r\n\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                let angle = Math.atan2(-dy, dx)\r\n\r\n                //  console.log(\"we messing with a ellipse\", points, angle, from);\r\n\r\n                points[0] += -from.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.radiusY * Math.sin(angle + Math.PI)\r\n            } else if (from.attrs.name.includes('star')) {\r\n                origin = { x: from.attrs.x, y: from.attrs.y }\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                let angle = Math.atan2(-dy, dx)\r\n\r\n                //  console.log(\"we messing with a ellipse\", points, angle, from);\r\n\r\n                points[0] += -from.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[1] += from.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n            } else if (from.attrs.name.includes('text')) {\r\n                let fromTextHeight = from.textHeight || from.attrs.textHeight\r\n                let fromTextWidth = from.textWidth || from.attrs.textWidth\r\n\r\n                origin = {\r\n                    x: from.attrs.x + fromTextWidth / 2,\r\n                    y: from.attrs.y + fromTextWidth / 2\r\n                }\r\n                dy = point.y - origin.y\r\n                dx = point.x - origin.x\r\n                theta = Math.atan2(dy, dx)\r\n                angle = (theta / Math.PI) * 180\r\n\r\n                if (angle <= -45 && angle >= -135) {\r\n                    //top\r\n                    points[0] += fromTextWidth / 2\r\n                } else if (angle > 45 && angle < 135) {\r\n                    //bottom\r\n                    points[0] += fromTextWidth / 2\r\n                    points[1] += fromTextHeight\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    //left\r\n                    points[1] += fromTextHeight / 2\r\n                } else if (angle > -45 && angle < 45) {\r\n                    points[0] += fromTextWidth\r\n                    points[1] += fromTextHeight / 2\r\n                }\r\n            }\r\n        }\r\n        if (stuff.type === 'onlyTo') {\r\n            if (to.attrs.name.includes('rect')) {\r\n                var endPoint = { x: points[0], y: points[1] }\r\n                origin = {\r\n                    x: to.attrs.x + to.attrs.width / 2,\r\n                    y: to.attrs.y + to.attrs.height / 2\r\n                }\r\n\r\n                dy = endPoint.y - origin.y\r\n                dx = endPoint.x - origin.x\r\n                theta = Math.atan2(dy, dx)\r\n                angle = (theta / Math.PI) * 180\r\n\r\n                if (angle > 45 && angle < 135) {\r\n                    points[2] += to.attrs.width / 2\r\n                    points[3] += to.attrs.height\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    points[3] += to.attrs.height / 2\r\n                } else if (angle > -135 && angle < -45) {\r\n                    points[2] += to.attrs.width / 2\r\n                } else {\r\n                    points[2] += to.attrs.width\r\n                    points[3] += to.attrs.height / 2\r\n                }\r\n            } else if (to.attrs.name.includes('ellipse')) {\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                let angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[2] += to.attrs.radiusX * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.radiusY * Math.sin(angle + Math.PI)\r\n            } else if (to.attrs.name.includes('star')) {\r\n                const dy = points[3] - points[1]\r\n                const dx = points[2] - points[0]\r\n                let angle = Math.atan2(-dy, dx)\r\n                //      console.log(dy, dx);\r\n\r\n                points[2] += to.attrs.outerRadius * Math.cos(angle + Math.PI)\r\n                points[3] -= to.attrs.outerRadius * Math.sin(angle + Math.PI)\r\n            } else if (to.attrs.name.includes('text')) {\r\n                let toTextHeight = to.textHeight || to.attrs.textHeight\r\n                let toTextWidth = to.textWidth || to.attrs.textWidth\r\n\r\n                endPoint = { x: points[0], y: points[1] }\r\n                origin = {\r\n                    x: to.attrs.x + toTextWidth / 2,\r\n                    y: to.attrs.y + toTextWidth / 2\r\n                }\r\n\r\n                dy = endPoint.y - origin.y\r\n                dx = endPoint.x - origin.x\r\n                theta = Math.atan2(dy, dx)\r\n                angle = (theta / Math.PI) * 180\r\n\r\n                if (angle > 45 && angle < 135) {\r\n                    points[2] += toTextWidth / 2\r\n                    points[3] += toTextHeight\r\n                } else if (\r\n                    (angle > 135 && angle < 180) ||\r\n                    (angle > -180 && angle < -135)\r\n                ) {\r\n                    points[3] += toTextHeight / 2\r\n                } else if (angle > -135 && angle < -45) {\r\n                    points[2] += toTextWidth / 2\r\n                } else {\r\n                    points[2] += toTextHeight\r\n                    points[3] += toTextHeight / 2\r\n                }\r\n            }\r\n        }\r\n\r\n        return points\r\n    }\r\n\r\n    render() {\r\n        var points = null\r\n\r\n        if (this.props.current) {\r\n            if (this.props.from) {\r\n                points = [\r\n                    this.props.from.attrs.x,\r\n                    this.props.from.attrs.y,\r\n                    this.props.arrowEndX,\r\n                    this.props.arrowEndY\r\n                ]\r\n                let stuff = {\r\n                    points: points,\r\n                    from: this.props.from,\r\n                    mouseX: this.props.arrowEndX,\r\n                    mouseY: this.props.arrowEndY,\r\n                    type: 'onlyFrom'\r\n                }\r\n                points = this.getConnectorPoints(stuff)\r\n            }\r\n        }\r\n        if (this.props.current === false) {\r\n            if (this.props.from && this.props.to) {\r\n                points = [\r\n                    this.props.from.attrs.x,\r\n                    this.props.from.attrs.y,\r\n                    this.props.to.attrs.x,\r\n                    this.props.to.attrs.y\r\n                ]\r\n\r\n                let toSend = {\r\n                    points: points,\r\n                    from: this.props.from,\r\n                    to: this.props.to,\r\n                    type: 'FromAndTo'\r\n                }\r\n\r\n                points = this.getConnectorPoints(toSend)\r\n\r\n                //get connector points\r\n            } else if (this.props.from) {\r\n                points = [\r\n                    this.props.from.attrs.x,\r\n                    this.props.from.attrs.y,\r\n                    this.props.points[2],\r\n                    this.props.points[3]\r\n                ]\r\n\r\n                let stuff = {\r\n                    points: points,\r\n                    from: this.props.from,\r\n                    mouseX: this.props.points[2],\r\n                    mouseY: this.props.points[3],\r\n                    type: 'onlyFrom'\r\n                }\r\n                points = this.getConnectorPoints(stuff)\r\n            } else if (this.props.to) {\r\n                points = [\r\n                    this.props.points[0],\r\n                    this.props.points[1],\r\n                    this.props.to.attrs.x,\r\n                    this.props.to.attrs.y\r\n                ]\r\n\r\n                let stuff = {\r\n                    points: points,\r\n                    to: this.props.to,\r\n                    type: 'onlyTo',\r\n                    mouseX: this.props.to.attrs.x,\r\n                    mouseY: this.props.to.attrs.y\r\n                }\r\n                points = this.getConnectorPoints(stuff)\r\n            }\r\n        }\r\n        return (\r\n            <Arrow\r\n                name={this.props.name}\r\n                points={points}\r\n                strokeWidth={1.5}\r\n                stroke={this.props.stroke}\r\n                fill={this.props.fill}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Connector\r\n"]},"metadata":{},"sourceType":"module"}