{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Util_1 = require(\"../Util\");\n\nvar Factory_1 = require(\"../Factory\");\n\nvar Shape_1 = require(\"../Shape\");\n\nvar Animation_1 = require(\"../Animation\");\n\nvar Validators_1 = require(\"../Validators\");\n\nvar Global_1 = require(\"../Global\");\n\nvar Sprite = function (_super) {\n  __extends(Sprite, _super);\n\n  function Sprite(config) {\n    var _this = _super.call(this, config) || this;\n\n    _this._updated = true;\n    _this.anim = new Animation_1.Animation(function () {\n      var updated = _this._updated;\n      _this._updated = false;\n      return updated;\n    });\n\n    _this.on('animationChange.konva', function () {\n      this.frameIndex(0);\n    });\n\n    _this.on('frameIndexChange.konva', function () {\n      this._updated = true;\n    });\n\n    _this.on('frameRateChange.konva', function () {\n      if (!this.anim.isRunning()) {\n        return;\n      }\n\n      clearInterval(this.interval);\n\n      this._setInterval();\n    });\n\n    return _this;\n  }\n\n  Sprite.prototype._sceneFunc = function (context) {\n    var anim = this.animation(),\n        index = this.frameIndex(),\n        ix4 = index * 4,\n        set = this.animations()[anim],\n        offsets = this.frameOffsets(),\n        x = set[ix4 + 0],\n        y = set[ix4 + 1],\n        width = set[ix4 + 2],\n        height = set[ix4 + 3],\n        image = this.image();\n\n    if (this.hasFill() || this.hasStroke()) {\n      context.beginPath();\n      context.rect(0, 0, width, height);\n      context.closePath();\n      context.fillStrokeShape(this);\n    }\n\n    if (image) {\n      if (offsets) {\n        var offset = offsets[anim],\n            ix2 = index * 2;\n        context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);\n      } else {\n        context.drawImage(image, x, y, width, height, 0, 0, width, height);\n      }\n    }\n  };\n\n  Sprite.prototype._hitFunc = function (context) {\n    var anim = this.animation(),\n        index = this.frameIndex(),\n        ix4 = index * 4,\n        set = this.animations()[anim],\n        offsets = this.frameOffsets(),\n        width = set[ix4 + 2],\n        height = set[ix4 + 3];\n    context.beginPath();\n\n    if (offsets) {\n      var offset = offsets[anim];\n      var ix2 = index * 2;\n      context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);\n    } else {\n      context.rect(0, 0, width, height);\n    }\n\n    context.closePath();\n    context.fillShape(this);\n  };\n\n  Sprite.prototype._useBufferCanvas = function () {\n    return (this.hasShadow() || this.getAbsoluteOpacity() !== 1) && this.hasStroke();\n  };\n\n  Sprite.prototype._setInterval = function () {\n    var that = this;\n    this.interval = setInterval(function () {\n      that._updateIndex();\n    }, 1000 / this.frameRate());\n  };\n\n  Sprite.prototype.start = function () {\n    if (this.isRunning()) {\n      return;\n    }\n\n    var layer = this.getLayer();\n    this.anim.setLayers(layer);\n\n    this._setInterval();\n\n    this.anim.start();\n  };\n\n  Sprite.prototype.stop = function () {\n    this.anim.stop();\n    clearInterval(this.interval);\n  };\n\n  Sprite.prototype.isRunning = function () {\n    return this.anim.isRunning();\n  };\n\n  Sprite.prototype._updateIndex = function () {\n    var index = this.frameIndex(),\n        animation = this.animation(),\n        animations = this.animations(),\n        anim = animations[animation],\n        len = anim.length / 4;\n\n    if (index < len - 1) {\n      this.frameIndex(index + 1);\n    } else {\n      this.frameIndex(0);\n    }\n  };\n\n  return Sprite;\n}(Shape_1.Shape);\n\nexports.Sprite = Sprite;\nSprite.prototype.className = 'Sprite';\n\nGlobal_1._registerNode(Sprite);\n\nFactory_1.Factory.addGetterSetter(Sprite, 'animation');\nFactory_1.Factory.addGetterSetter(Sprite, 'animations');\nFactory_1.Factory.addGetterSetter(Sprite, 'frameOffsets');\nFactory_1.Factory.addGetterSetter(Sprite, 'image');\nFactory_1.Factory.addGetterSetter(Sprite, 'frameIndex', 0, Validators_1.getNumberValidator());\nFactory_1.Factory.addGetterSetter(Sprite, 'frameRate', 17, Validators_1.getNumberValidator());\nFactory_1.Factory.backCompat(Sprite, {\n  index: 'frameIndex',\n  getIndex: 'getFrameIndex',\n  setIndex: 'setFrameIndex'\n});\nUtil_1.Collection.mapMethods(Sprite);","map":null,"metadata":{},"sourceType":"script"}