{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\andre\\\\Desktop\\\\Great React Projects\\\\livesearch\\\\src\\\\Toolbar.js\";\nimport React, { Component } from 'react';\nimport { Rect, Ellipse, Star, Text, Arrow } from 'react-konva'; //at start, two same rectangles at one place\n//at the end of drag, note the x and y of the dragged rectangle, append it to GraphicsMain\n//return the dragged rectangle to original\n\nvar ToolBar = function ToolBar() {\n  return React.createElement(Rect, {\n    y: 80,\n    width: 77.5,\n    height: 355,\n    fill: \"white\",\n    shadowBlur: 5,\n    shadowColor: \"black\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n};\n\nvar Toolbar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Toolbar, _Component);\n\n  function Toolbar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Toolbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Toolbar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      arrowDraggable: false,\n      previousShape: undefined,\n      count: 0,\n      isDragging: false\n    };\n    return _this;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, this.props.layer ? React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(ToolBar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }), React.createElement(Ellipse, {\n        radiusX: 20,\n        radiusY: 20,\n        stroke: \"black\",\n        strokeWidth: 1.5,\n        x: 37.5,\n        y: 125,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }), React.createElement(Ellipse, {\n        radiusX: 20,\n        radiusY: 20,\n        stroke: \"black\",\n        strokeWidth: 1.5,\n        x: 37.5,\n        y: 125,\n        draggable: true,\n        ref: \"draggableEllipse\",\n        onDragEnd: function onDragEnd(e) {\n          //add the rectangle to parent\n          var name = 'ellipse' + _this2.props.ellipseName;\n          var toSend = {\n            x: e.target.x(),\n            y: e.target.y(),\n            radiusX: 20,\n            radiusY: 20,\n            stroke: 'black',\n            strokeWidth: 1.5,\n            name: name,\n            fill: 'white',\n            ref: name,\n            rotation: 0\n          };\n\n          _this2.props.appendToEllipses(toSend);\n\n          var ellipse = _this2.refs.draggableEllipse;\n          ellipse.position({\n            x: 37.5,\n            y: 125\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), React.createElement(Rect, {\n        width: 35,\n        height: 35,\n        stroke: \"black\",\n        strokeWidth: 1.5,\n        x: 20,\n        y: 180,\n        fill: \"white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(Rect, {\n        width: 35,\n        height: 35,\n        stroke: \"black\",\n        strokeWidth: 1.5,\n        x: 20,\n        y: 180,\n        draggable: true,\n        fill: \"white\",\n        ref: \"draggableRect\",\n        onDragEnd: function onDragEnd(e) {\n          //add the rectangle to parent\n          var name = 'rectangle' + _this2.props.rectName;\n          var toSend = {\n            x: e.target.x(),\n            y: e.target.y(),\n            width: 35,\n            height: 35,\n            stroke: 'black',\n            strokeWidth: 1.5,\n            rotation: 0,\n            name: name,\n            ref: name,\n            fill: 'white',\n            useImage: false\n          };\n\n          _this2.props.appendToRectangles(toSend);\n\n          var rect = _this2.refs.draggableRect;\n          rect.position({\n            x: 20,\n            y: 180\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(Star, {\n        innerRadius: 8,\n        outerRadius: 20,\n        numPoints: 5,\n        stroke: \"black\",\n        strokeWidth: 1.5,\n        x: 37.5,\n        y: 270,\n        fill: \"white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(Star, {\n        innerRadius: 8,\n        outerRadius: 20,\n        numPoints: 5,\n        stroke: \"black\",\n        strokeWidth: 1.5,\n        x: 37.5,\n        y: 270,\n        draggable: true,\n        ref: \"draggableStar\",\n        onDragEnd: function onDragEnd(e) {\n          //add the rectangle to parent\n          var name = 'star' + _this2.props.starName;\n          var toSend = {\n            x: e.target.x(),\n            y: e.target.y(),\n            innerRadius: 8,\n            outerRadius: 20,\n            numPoints: 5,\n            stroke: 'black',\n            strokeWidth: 1.5,\n            name: name,\n            fill: 'white',\n            ref: name,\n            rotation: 0\n          };\n\n          _this2.props.appendToStars(toSend);\n\n          var star = _this2.refs.draggableStar;\n          star.position({\n            x: 37.5,\n            y: 270\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(Text, {\n        fontSize: 40,\n        text: \"T\",\n        fontFamily: \"Belgrano\",\n        x: 24,\n        y: 320,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(Text, {\n        fontSize: 40,\n        text: \"T\",\n        fontFamily: \"Belgrano\",\n        x: 24,\n        y: 320,\n        draggable: true,\n        ref: \"draggableText\",\n        onDragEnd: function onDragEnd(e) {\n          //add the rectangle to parent\n          var name = 'text' + _this2.props.textName;\n          var ref = 'text' + _this2.props.textName;\n          var toSend = {\n            x: e.target.x(),\n            y: e.target.y(),\n            fontSize: 25,\n            fontFamily: 'Belgrano',\n            ref: ref,\n            name: name,\n            text: '',\n            fill: 'black',\n            width: 300,\n            height: 25,\n            rotation: 0,\n            textWidth: _this2.refs.draggableText.textWidth,\n            textHeight: _this2.refs.draggableText.textHeight\n          };\n          console.log('tosend', toSend);\n\n          _this2.props.appendToTexts(toSend);\n\n          var text = _this2.refs.draggableText;\n          text.position({\n            x: 24,\n            y: 320\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(Arrow, {\n        points: [20, 400, 50, 400],\n        fill: \"black\",\n        stroke: \"black\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }), React.createElement(Arrow, {\n        points: [20, 400, 50, 400],\n        fill: \"black\",\n        stroke: \"black\",\n        ref: \"draggableArrow\",\n        name: \"draggableArrow\",\n        draggable: true,\n        onDragStart: function onDragStart() {\n          _this2.refs.draggableArrow.setAttr('fill', 'grey');\n\n          _this2.refs.draggableArrow.setAttr('stroke', 'grey');\n        },\n        onDragMove: function onDragMove() {\n          var pos = _this2.props.layer.getStage().getPointerPosition();\n\n          var shape = _this2.props.layer.getIntersection(pos); //after first frame\n\n\n          if (_this2.state.previousShape !== undefined && _this2.state.previousShape !== null) if (_this2.state.previousShape !== shape) {\n            //arrow entered a new shape\n            //the shape we left gets its original color back\n            if (_this2.state.previousShape.attrs.id !== 'ContainerRect' && !_this2.state.previousShape.attrs.name.includes('arrow')) {\n              _this2.refs.draggableArrow.setAttr('fill', 'black');\n\n              _this2.refs.draggableArrow.setAttr('stroke', 'black');\n            }\n          } //if arrow is moving in a single shape\n          else if (_this2.state.previousShape.attrs.id !== 'ContainerRect' && !shape.attrs.name.includes('arrow')) {\n              //if it the first time the shapes are same, set shape to blue, store the original color\n              _this2.refs.draggableArrow.setAttr('fill', '#ccf5ff');\n\n              _this2.refs.draggableArrow.setAttr('stroke', '#ccf5ff');\n            }\n\n          _this2.props.layer.draw();\n\n          _this2.setState({\n            previousShape: shape\n          });\n        },\n        onDragEnd: function onDragEnd(event) {\n          var pos = _this2.props.layer.getStage().getPointerPosition();\n\n          var shape = _this2.props.layer.getIntersection(pos); //shape is not containerRect, which means we are on a shape\n\n\n          if (shape && shape.attrs.id === undefined && !shape.attrs.name.includes('arrow')) {\n            var toSend = {\n              x: pos.x,\n              y: pos.y,\n              points: [20, 475, 60, 475],\n              from: shape,\n              stroke: 'black',\n              strokeWidth: '1.5',\n              fill: 'black'\n            };\n            console.log('from shape', shape);\n\n            _this2.props.newArrowOnDragEnd(toSend);\n          } else {\n            var _toSend = {\n              x: pos.x,\n              y: pos.y,\n              points: [20, 475, 60, 475],\n              stroke: 'black',\n              strokeWidth: '1.5',\n              fill: 'black'\n            };\n\n            _this2.props.newArrowOnDragEnd(_toSend);\n          } //if shape is not arrow nor the containerRect then we make a connector instead\n          //onDragEnd = dropping arrow down, create a new arrow with 2 same points at the dropped location\n          //create new arrow in Graphics.js\n          //from there, fire onMouseMove over the entire stage\n          //the arrow's points should be the first point onDragEnd and the second should be the current\n          //mouse position determined by onMouseMove event in stage\n\n\n          var arrow = _this2.refs.draggableArrow;\n          arrow.position({\n            x: 0,\n            y: 0\n          });\n          arrow.setAttr('fill', 'black');\n          arrow.setAttr('stroke', 'black');\n          arrow.draw();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      })) : null);\n    }\n  }]);\n\n  return Toolbar;\n}(Component);\n\nexport { Toolbar as default };","map":{"version":3,"sources":["C:\\Users\\andre\\Desktop\\Great React Projects\\livesearch\\src\\Toolbar.js"],"names":["React","Component","Rect","Ellipse","Star","Text","Arrow","ToolBar","Toolbar","state","arrowDraggable","previousShape","undefined","count","isDragging","props","layer","e","name","ellipseName","toSend","x","target","y","radiusX","radiusY","stroke","strokeWidth","fill","ref","rotation","appendToEllipses","ellipse","refs","draggableEllipse","position","rectName","width","height","useImage","appendToRectangles","rect","draggableRect","starName","innerRadius","outerRadius","numPoints","appendToStars","star","draggableStar","textName","fontSize","fontFamily","text","textWidth","draggableText","textHeight","console","log","appendToTexts","draggableArrow","setAttr","pos","getStage","getPointerPosition","shape","getIntersection","attrs","id","includes","draw","setState","event","points","from","newArrowOnDragEnd","arrow"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport { Rect, Ellipse, Star, Text, Arrow } from 'react-konva'\r\n//at start, two same rectangles at one place\r\n//at the end of drag, note the x and y of the dragged rectangle, append it to GraphicsMain\r\n//return the dragged rectangle to original\r\n\r\nconst ToolBar = () => (\r\n    <Rect\r\n        y={80}\r\n        width={77.5}\r\n        height={355}\r\n        fill=\"white\"\r\n        shadowBlur={5}\r\n        shadowColor=\"black\"\r\n    />\r\n)\r\n\r\nexport default class Toolbar extends Component {\r\n    state = {\r\n        arrowDraggable: false,\r\n        previousShape: undefined,\r\n        count: 0,\r\n        isDragging: false\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.props.layer ? (\r\n                    <React.Fragment>\r\n                        <ToolBar />\r\n                        <Ellipse\r\n                            radiusX={20}\r\n                            radiusY={20}\r\n                            stroke=\"black\"\r\n                            strokeWidth={1.5}\r\n                            x={37.5}\r\n                            y={125}\r\n                        />\r\n                        <Ellipse\r\n                            radiusX={20}\r\n                            radiusY={20}\r\n                            stroke=\"black\"\r\n                            strokeWidth={1.5}\r\n                            x={37.5}\r\n                            y={125}\r\n                            draggable\r\n                            ref=\"draggableEllipse\"\r\n                            onDragEnd={e => {\r\n                                //add the rectangle to parent\r\n                                let name = 'ellipse' + this.props.ellipseName\r\n                                let toSend = {\r\n                                    x: e.target.x(),\r\n                                    y: e.target.y(),\r\n                                    radiusX: 20,\r\n                                    radiusY: 20,\r\n                                    stroke: 'black',\r\n                                    strokeWidth: 1.5,\r\n                                    name: name,\r\n                                    fill: 'white',\r\n                                    ref: name,\r\n                                    rotation: 0\r\n                                }\r\n                                this.props.appendToEllipses(toSend)\r\n\r\n                                var ellipse = this.refs.draggableEllipse\r\n\r\n                                ellipse.position({\r\n                                    x: 37.5,\r\n                                    y: 125\r\n                                })\r\n                            }}\r\n                        />\r\n                        <Rect\r\n                            width={35}\r\n                            height={35}\r\n                            stroke=\"black\"\r\n                            strokeWidth={1.5}\r\n                            x={20}\r\n                            y={180}\r\n                            fill=\"white\"\r\n                        />\r\n                        <Rect\r\n                            width={35}\r\n                            height={35}\r\n                            stroke=\"black\"\r\n                            strokeWidth={1.5}\r\n                            x={20}\r\n                            y={180}\r\n                            draggable\r\n                            fill=\"white\"\r\n                            ref=\"draggableRect\"\r\n                            onDragEnd={e => {\r\n                                //add the rectangle to parent\r\n                                let name = 'rectangle' + this.props.rectName\r\n                                let toSend = {\r\n                                    x: e.target.x(),\r\n                                    y: e.target.y(),\r\n                                    width: 35,\r\n                                    height: 35,\r\n                                    stroke: 'black',\r\n                                    strokeWidth: 1.5,\r\n                                    rotation: 0,\r\n                                    name: name,\r\n                                    ref: name,\r\n                                    fill: 'white',\r\n                                    useImage: false\r\n                                }\r\n                                this.props.appendToRectangles(toSend)\r\n\r\n                                var rect = this.refs.draggableRect\r\n\r\n                                rect.position({\r\n                                    x: 20,\r\n                                    y: 180\r\n                                })\r\n                            }}\r\n                        />\r\n                        <Star\r\n                            innerRadius={8}\r\n                            outerRadius={20}\r\n                            numPoints={5}\r\n                            stroke=\"black\"\r\n                            strokeWidth={1.5}\r\n                            x={37.5}\r\n                            y={270}\r\n                            fill=\"white\"\r\n                        />\r\n                        <Star\r\n                            innerRadius={8}\r\n                            outerRadius={20}\r\n                            numPoints={5}\r\n                            stroke=\"black\"\r\n                            strokeWidth={1.5}\r\n                            x={37.5}\r\n                            y={270}\r\n                            draggable\r\n                            ref=\"draggableStar\"\r\n                            onDragEnd={e => {\r\n                                //add the rectangle to parent\r\n                                let name = 'star' + this.props.starName\r\n                                let toSend = {\r\n                                    x: e.target.x(),\r\n                                    y: e.target.y(),\r\n                                    innerRadius: 8,\r\n                                    outerRadius: 20,\r\n                                    numPoints: 5,\r\n                                    stroke: 'black',\r\n                                    strokeWidth: 1.5,\r\n                                    name: name,\r\n                                    fill: 'white',\r\n                                    ref: name,\r\n                                    rotation: 0\r\n                                }\r\n                                this.props.appendToStars(toSend)\r\n\r\n                                var star = this.refs.draggableStar\r\n\r\n                                star.position({\r\n                                    x: 37.5,\r\n                                    y: 270\r\n                                })\r\n                            }}\r\n                        />\r\n                        <Text\r\n                            fontSize={40}\r\n                            text=\"T\"\r\n                            fontFamily=\"Belgrano\"\r\n                            x={24}\r\n                            y={320}\r\n                        />\r\n                        <Text\r\n                            fontSize={40}\r\n                            text=\"T\"\r\n                            fontFamily=\"Belgrano\"\r\n                            x={24}\r\n                            y={320}\r\n                            draggable\r\n                            ref=\"draggableText\"\r\n                            onDragEnd={e => {\r\n                                //add the rectangle to parent\r\n                                let name = 'text' + this.props.textName\r\n                                let ref = 'text' + this.props.textName\r\n                                let toSend = {\r\n                                    x: e.target.x(),\r\n                                    y: e.target.y(),\r\n                                    fontSize: 25,\r\n                                    fontFamily: 'Belgrano',\r\n                                    ref: ref,\r\n                                    name: name,\r\n                                    text: '',\r\n                                    fill: 'black',\r\n                                    width: 300,\r\n                                    height: 25,\r\n                                    rotation: 0,\r\n                                    textWidth: this.refs.draggableText\r\n                                        .textWidth,\r\n                                    textHeight: this.refs.draggableText\r\n                                        .textHeight\r\n                                }\r\n                                console.log('tosend', toSend)\r\n                                this.props.appendToTexts(toSend)\r\n\r\n                                var text = this.refs.draggableText\r\n\r\n                                text.position({\r\n                                    x: 24,\r\n                                    y: 320\r\n                                })\r\n                            }}\r\n                        />\r\n                        <Arrow\r\n                            points={[20, 400, 50, 400]}\r\n                            fill=\"black\"\r\n                            stroke=\"black\"\r\n                        />\r\n                        <Arrow\r\n                            points={[20, 400, 50, 400]}\r\n                            fill=\"black\"\r\n                            stroke=\"black\"\r\n                            ref=\"draggableArrow\"\r\n                            name=\"draggableArrow\"\r\n                            draggable\r\n                            onDragStart={() => {\r\n                                this.refs.draggableArrow.setAttr('fill', 'grey')\r\n                                this.refs.draggableArrow.setAttr(\r\n                                    'stroke',\r\n                                    'grey'\r\n                                )\r\n                            }}\r\n                            onDragMove={() => {\r\n                                var pos = this.props.layer\r\n                                    .getStage()\r\n                                    .getPointerPosition()\r\n                                var shape = this.props.layer.getIntersection(\r\n                                    pos\r\n                                )\r\n\r\n                                //after first frame\r\n                                if (\r\n                                    this.state.previousShape !== undefined &&\r\n                                    this.state.previousShape !== null\r\n                                )\r\n                                    if (this.state.previousShape !== shape) {\r\n                                        //arrow entered a new shape\r\n\r\n                                        //the shape we left gets its original color back\r\n                                        if (\r\n                                            this.state.previousShape.attrs\r\n                                                .id !== 'ContainerRect' &&\r\n                                            !this.state.previousShape.attrs.name.includes(\r\n                                                'arrow'\r\n                                            )\r\n                                        ) {\r\n                                            this.refs.draggableArrow.setAttr(\r\n                                                'fill',\r\n                                                'black'\r\n                                            )\r\n                                            this.refs.draggableArrow.setAttr(\r\n                                                'stroke',\r\n                                                'black'\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                    //if arrow is moving in a single shape\r\n                                    else if (\r\n                                        this.state.previousShape.attrs.id !==\r\n                                            'ContainerRect' &&\r\n                                        !shape.attrs.name.includes('arrow')\r\n                                    ) {\r\n                                        //if it the first time the shapes are same, set shape to blue, store the original color\r\n                                        this.refs.draggableArrow.setAttr(\r\n                                            'fill',\r\n                                            '#ccf5ff'\r\n                                        )\r\n                                        this.refs.draggableArrow.setAttr(\r\n                                            'stroke',\r\n                                            '#ccf5ff'\r\n                                        )\r\n                                    }\r\n\r\n                                this.props.layer.draw()\r\n\r\n                                this.setState({ previousShape: shape })\r\n                            }}\r\n                            onDragEnd={event => {\r\n                                var pos = this.props.layer\r\n                                    .getStage()\r\n                                    .getPointerPosition()\r\n                                var shape = this.props.layer.getIntersection(\r\n                                    pos\r\n                                )\r\n\r\n                                //shape is not containerRect, which means we are on a shape\r\n                                if (\r\n                                    shape &&\r\n                                    shape.attrs.id === undefined &&\r\n                                    !shape.attrs.name.includes('arrow')\r\n                                ) {\r\n                                    let toSend = {\r\n                                        x: pos.x,\r\n                                        y: pos.y,\r\n                                        points: [20, 475, 60, 475],\r\n                                        from: shape,\r\n                                        stroke: 'black',\r\n                                        strokeWidth: '1.5',\r\n                                        fill: 'black'\r\n                                    }\r\n                                    console.log('from shape', shape)\r\n                                    this.props.newArrowOnDragEnd(toSend)\r\n                                } else {\r\n                                    let toSend = {\r\n                                        x: pos.x,\r\n                                        y: pos.y,\r\n                                        points: [20, 475, 60, 475],\r\n                                        stroke: 'black',\r\n                                        strokeWidth: '1.5',\r\n                                        fill: 'black'\r\n                                    }\r\n\r\n                                    this.props.newArrowOnDragEnd(toSend)\r\n                                }\r\n\r\n                                //if shape is not arrow nor the containerRect then we make a connector instead\r\n\r\n                                //onDragEnd = dropping arrow down, create a new arrow with 2 same points at the dropped location\r\n                                //create new arrow in Graphics.js\r\n                                //from there, fire onMouseMove over the entire stage\r\n                                //the arrow's points should be the first point onDragEnd and the second should be the current\r\n                                //mouse position determined by onMouseMove event in stage\r\n                                var arrow = this.refs.draggableArrow\r\n                                arrow.position({ x: 0, y: 0 })\r\n                                arrow.setAttr('fill', 'black')\r\n                                arrow.setAttr('stroke', 'black')\r\n\r\n                                arrow.draw()\r\n                            }}\r\n                        />\r\n                    </React.Fragment>\r\n                ) : null}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}