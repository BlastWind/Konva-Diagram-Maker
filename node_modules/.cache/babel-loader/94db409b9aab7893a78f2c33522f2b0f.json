{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport Button from './Button';\n\nvar noop = function noop() {};\n\nvar ToggleButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ToggleButton, _React$Component);\n\n  function ToggleButton() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.state = {\n      focused: false\n    };\n\n    _this.handleFocus = function (e) {\n      if (e.target.tagName === 'INPUT') _this.setState({\n        focused: true\n      });\n    };\n\n    _this.handleBlur = function (e) {\n      if (e.target.tagName === 'INPUT') _this.setState({\n        focused: false\n      });\n    };\n\n    return _this;\n  }\n\n  var _proto = ToggleButton.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        name = _this$props.name,\n        className = _this$props.className,\n        checked = _this$props.checked,\n        type = _this$props.type,\n        onChange = _this$props.onChange,\n        value = _this$props.value,\n        disabled = _this$props.disabled,\n        inputRef = _this$props.inputRef,\n        innerRef = _this$props.innerRef,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"name\", \"className\", \"checked\", \"type\", \"onChange\", \"value\", \"disabled\", \"inputRef\", \"innerRef\"]);\n\n    var focused = this.state.focused;\n    return React.createElement(Button, _extends({}, props, {\n      ref: innerRef,\n      className: classNames(className, focused && 'focus', disabled && 'disabled'),\n      type: null,\n      active: !!checked,\n      as: \"label\"\n    }), React.createElement(\"input\", {\n      name: name,\n      type: type,\n      value: value,\n      ref: inputRef,\n      autoComplete: \"off\",\n      checked: !!checked,\n      disabled: !!disabled,\n      onFocus: this.handleFocus,\n      onBlur: this.handleBlur,\n      onChange: onChange || noop\n    }), children);\n  };\n\n  return ToggleButton;\n}(React.Component);\n\nexport default React.forwardRef(function (props, ref) {\n  return React.createElement(ToggleButton, _extends({\n    innerRef: ref\n  }, props));\n});","map":null,"metadata":{},"sourceType":"module"}